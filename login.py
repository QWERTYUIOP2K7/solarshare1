# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_jErOjCb-__uoA3vSqzN0J3pPlqrWT8Q
"""

import firebase_admin
from firebase_admin import credentials, auth, firestore
import asyncio

# Initialize Firebase Admin SDK
'''cred = credentials.Certificate('/content/drive/MyDrive/veshack/loginsignup-2d366-firebase-adminsdk-xkd6y-34e586e4b0.json')
firebase_admin.initialize_app(cred)'''

# Initialize Firestore
db = firestore.client()

async def register_users(users):
    for user in users:
        email = user['email']
        password = user['password']
        display_name = user['displayName']
        community_name = user.get('communityName')

        try:
            # Create user in Firebase
            user_record = auth.create_user(
                email=email,
                password=password,
                display_name=display_name
            )

            # Store user data in Firestore
            user_data = {
                'displayName': display_name,
                'email': email,
                'communities': []  # To hold community IDs
            }
            db.collection('users').document(user_record.uid).set(user_data)

            # Join community if provided
            if community_name:
                await join_community(user_record.uid, community_name)

            print(f"User  registered: {display_name} ({email})")
        except Exception as e:
            print(f"Error registering user {email}: {str(e)}")

async def join_community(user_id, community_name):
    # Check if community exists
    community_ref = db.collection('communities').where('name', '==', community_name).limit(1)
    community_docs = community_ref.get()

    if len(community_docs) == 0:
        # Create new community if it doesn't exist
        community_ref = db.collection('communities').add({'name': community_name, 'members': [user_id]})
        print(f"Community created: {community_name}")
    else:
        community_id = community_docs[0].id
        # Add user to existing community
        db.collection('communities').document(community_id).update({
            'members': firestore.ArrayUnion([user_id])
        })
        print(f"User  {user_id} joined community: {community_name}")

async def search_communities_by_name(name):
    communities_ref = db.collection('communities').where('name', '>=', name).where('name', '<=', name + '\uf8ff')
    community_docs = communities_ref.get()
    return [doc.to_dict() for doc in community_docs]

import asyncio
import ipywidgets as widgets
from IPython.display import display
def register_user_interface():
  # Create input widgets
  email_input = widgets.Text(
      description='Email:',
      placeholder='Enter your email'
  )

  password_input = widgets.Password(
      description='Password:',
      placeholder='Enter your password'
  )

  display_name_input = widgets.Text(
      description='Display Name:',
      placeholder='Enter your display name'
  )

  community_name_input = widgets.Text(
      description='Community Name:',
      placeholder='Enter community name (optional)'
  )

  submit_button = widgets.Button(description='Register')

  # Output area to display results
  output = widgets.Output()

  async def register_user(email, password, display_name, community_name):
      await asyncio.sleep(1)  # Simulate a network delay
      with output:
          print("User  registered: {display_name} ({email})")
          if community_name:
              print("Joined community: {community_name}")

  def on_submit(b):
      email = email_input.value
      password = password_input.value
      display_name = display_name_input.value
      community_name = community_name_input.value or None  # Optional field

      # Schedule the registration task
      asyncio.create_task(register_user(email, password, display_name, community_name))

  # Link the button click event to the on_submit function
  submit_button.on_click(on_submit)

  # Display the widgets
  display(email_input, password_input, display_name_input, community_name_input, submit_button, output)