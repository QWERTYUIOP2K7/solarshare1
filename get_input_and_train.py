# -*- coding: utf-8 -*-
"""get input and train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PL5YoCTKfRU6PCkfuCcu5XnhqH3umkv6
"""

import pandas as pd
from datetime import datetime
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

# Function to get user input
def get_input_and_train():
  def get_user_input():
      try:
          project_id = int(input("Enter Project ID (integer): "))
          project_name = input("Enter Project Name: ")
          address = input("Enter Address: ")
          installation_date = input("Enter Installation Date (YYYY-MM-DD): ")
          kwh = float(input("Enter total kWh produced: "))
          date = input("Enter Date of Production (YYYY-MM-DD): ")

          # Ensure the dates are in the correct datetime format
          installation_date = pd.to_datetime(installation_date)
          date = pd.to_datetime(date)

          return {
              'id': project_id,
              'name': project_name,
              'address': address,
              'installationDate': installation_date,
              'kWh': kwh,
              'date': date
          }
      except ValueError as e:
          print(f"Error: {e}. Please enter valid input.")
          return None

  # Load the existing dataset
  file_path = '/content/drive/MyDrive/veshack/Solar_Energy_Production.csv'
  solar_data = pd.read_csv(file_path)

  # Convert 'date' and 'installationDate' to datetime
  solar_data['date'] = pd.to_datetime(solar_data['date'], errors='coerce')
  solar_data['installationDate'] = pd.to_datetime(solar_data['installationDate'], errors='coerce')

  # Collect user data
  new_record = get_user_input()

  if new_record:
      new_data_df = pd.DataFrame([new_record])
      solar_data = pd.concat([solar_data, new_data_df], ignore_index=True)

      # Ensure dates are properly parsed
      solar_data['year'] = solar_data['date'].dt.year
      solar_data['month'] = solar_data['date'].dt.month
      solar_data['day'] = solar_data['date'].dt.day

      # Calculate total energy production per project
      total_production = solar_data.groupby(['id', 'name', 'address', 'installationDate']).agg({
          'kWh': 'sum',
          'year': 'nunique'
      }).reset_index()

      # Check for division by zero
      total_production['efficiency'] = total_production['kWh'] / total_production['year'].replace(0, pd.NA)

      total_production.dropna(axis=1, how='all', inplace=True)

      # Features and target variable
      X = total_production[['kWh', 'year']]
      y = total_production['efficiency'].dropna()  # Drop NA values for target variable

      # Split data into training and testing sets
      X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

      # Train the model
      rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)
      rf_regressor.fit(X_train, y_train)

      print("\nDataset Updated")
  else:
      print("User input was invalid. No changes were made to the dataset.")