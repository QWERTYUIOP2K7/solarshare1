# -*- coding: utf-8 -*-
"""train and predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aFzlOhhFDaDun6-Hv69Qv8byF_aaT4jB
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import accuracy_score, roc_auc_score
# Load the dataset
file_path = '/content/drive/MyDrive/veshack/Solar_Energy_Production.csv'
solar_data = pd.read_csv(file_path)

# Convert 'date' and 'installationDate' to datetime
def train_and_predict(data):
  solar_data['date'] = pd.to_datetime(solar_data['date'], errors='coerce')
  solar_data['installationDate'] = pd.to_datetime(solar_data['installationDate'], errors='coerce')

  # Prepare the dataset
  # Calculate efficiency as total kWh produced per year of operation
  solar_data['year'] = solar_data['date'].dt.year
  solar_data['month'] = solar_data['date'].dt.month
  solar_data['day'] = solar_data['date'].dt.day
  solar_data.dropna(axis=1, how='all', inplace=True)
  # Calculate total energy production per project
  total_production = solar_data.groupby(['id', 'name', 'address', 'installationDate']).agg({
      'kWh': 'sum',  # Total kWh for each project
      'year': 'nunique'  # Number of active years
  }).reset_index()

  # Calculate efficiency (target variable for prediction)
  total_production['efficiency'] = total_production['kWh'] / total_production['year']

  # Use features: 'kWh', 'year' for prediction
  X = total_production[['kWh', 'year']]
  y = total_production['efficiency']

  # Split data into training and testing sets
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

  # Initialize the RandomForestRegressor
  rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)
  rf_regressor.fit(X_train, y_train)

  # Predict efficiency on the test set
  y_pred = rf_regressor.predict(X_test)

  # Evaluate the model
  mse = mean_squared_error(y_test, y_pred)
  r2 = r2_score(y_test, y_pred)

  # Round the predicted efficiency to two decimal places
  total_production['predicted_efficiency'] = rf_regressor.predict(X).round(2)

  # Rename columns for clarity
  total_production.rename(columns={
      'name': 'Project Name',
      'address': 'Address',
      'installationDate': 'Installation Date',
      'predicted_efficiency': 'Predicted Efficiency (kWh/year)'
  }, inplace=True)

  # Select relevant columns for display
  cleaned_recommendations = total_production[['Project Name', 'Address', 'Installation Date', 'Predicted Efficiency (kWh/year)']]

  # Sort by predicted efficiency for the top 10
  top_recommendations = cleaned_recommendations.sort_values(by='Predicted Efficiency (kWh/year)', ascending=False).head(11)

  # Display the formatted results
  top_recommendations.reset_index(drop=True, inplace=True)
  print(top_recommendations)
  print("Accuracy:", {accuracy_score(y_test, y_pred)})